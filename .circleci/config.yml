# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  node: circleci/node@5.0.2
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment:${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:

  # deploy-slack:
  #   executor:
  #     name: node/default
  #   steps:
  #     - checkout
  #     - node/install-packages
  #     - run:
  #         command: npm run deploy
  #     - slack/notify:
  #         channel: udacity-devops-engineer-training
  #         event: fail
  #         template: basic_fail_1

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - destroy-environment

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - destroy-environment

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
            cd backend
            npm install
            npm run test

  deploy-frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install pre-reqs
          command: |
            yum install -y gzip tar

      - run:
          name: Create frontend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople \
              --region us-east-1
      - destroy-environment

  deploy-backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install pre-reqs
          command: |
            yum install -y gzip tar
      - run:
          name: Create backend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1 \
              --tags project=udapeople
   
      - run:
          name: Add backend ip to ansible inventory
          command: |
            touch inventory.txt
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" "Name=instance-state-name,Values=running" \
              --output text >> .circleci/ansible/inventory.txt
            chmod 744 inventory.txt
            cat .circleci/ansible/inventory.txt

            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            curl https://kvdb.io/9ad179kyNWDqcyuH5LG9Ccbackend_api_${CIRCLE_WORKFLOW_ID:0:7}  -d ${BACKEND_IP}
            curl --insecure https://kvdb.io/9ad179kyNWDqcyuH5LG9Cc/backend_api_${CIRCLE_WORKFLOW_ID:0:7}

      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d6:ce:95:d0:62:22:aa:3f:0f:f7:c8:32:d1:b8:b9:17"] # You can get this ID in the section where you registered the SSH Key
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
            pip3 install awscli

      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            pwd
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment      
      # - revert-migrations

  run-migrations:
    docker:
    # previous docker version 13.8.0 
      - image: circleci/node:14.18.1 
    steps:
      - checkout
      - run: node --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to kvdb.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl https://kvdb.io/9ad179kyNWDqcyuH5LG9Cc/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure 
      - destroy-environment      
      # - revert-migrations

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI (amazon/aws-cli)
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: 
          name: Install dependencies
          # install aws cli: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" "Name=instance-state-name,Values=running" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm --version
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ~/project/frontend/dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive

      # Here's where you will add some code to rollback on failure 
      - destroy-environment      
      # - revert-migrations

  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible - 
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: ["d6:ce:95:d0:62:22:aa:3f:0f:f7:c8:32:d1:b8:b9:17"]
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #           apk add --update tar gzip ansible nodejs npm curl jq nginx
  #           # apk add --update ansible npm nodejs
  #           apk update pip3
  #           pip3 install awscli
      
  #     - run:
  #         name: install open ssh
  #         command: apk add openssh-client
      
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           pwd
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact-backend.tar.gz .
  #           chmod 644 artifact-backend.tar.gz
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure
      # - destroy-environment  
      # - revert-migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout

      - attach_workspace:
          at: ~/

      - add_ssh_keys:
          fingerprints: ["d6:ce:95:d0:62:22:aa:3f:0f:f7:c8:32:d1:b8:b9:17"]

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl jq nginx
            pip install awscli
            npm audit fix

      - run:
            name: installing openssh
            command: |
              apk add openssh-client
      
      - restore_cache:
          keys: 
            - backend-build-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Deploy backend
          command: |
            # your code here           
            ls -la
            echo "My current workspace is : $(pwd)" 
            echo "BUILDING THE BACKEND ENVIRONMENT FILE"
            echo NODE_ENV=production >> "backend/.env"
            echo ENVIROMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            

            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -czvf /etc/artifact.tar.gz ./
            chmod 644 /etc/artifact.tar.gz

            cd .circleci/ansible
            
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt 
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure 
      #adding comments
      - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl npm tar gzip nodejs
            pip install awscli
            /usr/local/bin/python -m pip install --upgrade pip
            
      - run:
          name: Get backend url
          command: |
            # your code here
            # Fetch and prepare the BACKEND_IP env var
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"

      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" "Name=instance-state-name,Values=running" --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"

            if curl "${API_URL}/api/status"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment
      # - revert-migrations

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-frontend-infrastructure
      - deploy-backend-infrastructure
      - configure-infrastructure:
          requires: [deploy-backend-infrastructure, deploy-frontend-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]

  # deploy_and_notify:
  #   jobs:
  #     - deploy-slack